# focus window (bsp)
ctrl + alt - h : yabai -m window --focus west
ctrl + alt - l : yabai -m window --focus east
ctrl + alt - k : yabai -m window --focus north
ctrl + alt - j : yabai -m window --focus south

ctrl + alt - m : yabai -m window --focus recent

ctrl + alt - 0x35 : yabai -m window --focus stack.recent       # escape
ctrl + alt - 0x32 : yabai -m window --focus stack.next         # ` backtick
ctrl + alt + shift - 0x32 : yabai -m window --focus stack.prev # ~ tilde

# swap managed window
ctrl + alt + shift - h : yabai -m window --swap west
ctrl + alt + shift - j : yabai -m window --swap south
ctrl + alt + shift - k : yabai -m window --swap north
ctrl + alt + shift - l : yabai -m window --swap east

# move managed window into tree in target direction
ctrl + alt + shift - n : yabai -m window --warp west
ctrl + alt + shift - m : yabai -m window --warp south
ctrl + alt + shift - 0x2B : yabai -m window --warp north # , comma
ctrl + alt + shift - 0x2F : yabai -m window --warp east  # . period

# stack managed window with previously focused window
ctrl + alt - 0x27 : yabai -m window --stack recent # ' apostrophe

# rotate space's tree
ctrl + alt - tab : yabai -m space --rotate 90
ctrl + alt + shift - tab : yabai -m space --rotate 270

# balance size of windows
ctrl + alt - r : yabai -m space --balance

# make floating window fill left-half of screen
ctrl + alt - u : yabai -m window --grid 1:2:0:0:1:1
ctrl + alt - i : yabai -m window --grid 1:2:1:0:1:1

# send window to desktop and follow focus
ctrl + alt + shift - y : yabai -m window --space prev; yabai -m space --focus prev
ctrl + alt + shift - o : yabai -m window --space next; yabai -m space --focus next

# focus monitor
ctrl + alt - 0x2C  : yabai -m display --focus recent # / forwad slash

# send window to monitor and follow focus
ctrl + alt - y : yabai -m window --display prev; yabai -m display --focus prev
ctrl + alt - o : yabai -m window --display next; yabai -m display --focus next

# toggle window zoom
ctrl + alt - f : yabai -m window --toggle zoom-parent
ctrl + alt + shift - f : yabai -m window --toggle zoom-fullscreen

# float / unfloat window and center on screen
ctrl + alt - t : yabai -m window --toggle float;\
           yabai -m window --grid 4:4:1:1:2:2

# switch layout
ctrl + alt - 0x2A : yabai -m space --layout bsp # \ backslash
ctrl + alt + shift - 0x2A : yabai -m space --layout stack # | vertical pipe
ctrl + alt - p : yabai -m space --layout stack
ctrl + alt + shift - t : yabai -m space --layout float

# move spaces UNABLE TO DO THIS WITHOUT DISABLING SIP
#ctrl + alt - n : yabai -m space --focus prev
#ctrl + alt - 0x2F : yabai -m space --focus next   # . period
#ctrl + alt - 0x2B : yabai -m space --focus recent # , comma

# move floating window
# shift + ctrl - a : yabai -m window --move rel:-20:0
# shift + ctrl - s : yabai -m window --move rel:0:20

# toggle window split type
# alt - e : yabai -m window --toggle split

# increase window size
# shift + alt - a : yabai -m window --resize left:-20:0
# shift + alt - w : yabai -m window --resize top:0:-20

# decrease window size
# shift + cmd - s : yabai -m window --resize bottom:0:-20
# shift + cmd - w : yabai -m window --resize top:0:20

# toggle sticky(+float), topmost, picture-in-picture
# alt - p : yabai -m window --toggle sticky;\
#           yabai -m window --toggle topmost;\
#           yabai -m window --toggle pip

# set insertion point in focused container
# ctrl + alt - h : yabai -m window --insert west

# create desktop, move window and follow focus - uses jq for parsing json (brew install jq)
# shift + cmd - n : yabai -m space --create && \
#                   index="$(yabai -m query --spaces --display | jq 'map(select(."native-fullscreen" == 0))[-1].index')" && \
#                   yabai -m window --space "${index}" && \
#                   yabai -m space --focus "${index}"

###############################
# yabai selection definitions #
###############################

# DIR_SEL: north | east | south | west
# STACK_SEL: stack.prev | stack.next | stack.fist | stack.last | stack.recent
# WINDOW_SEL: prev | next | first | last | recent | mouse | largest | smallest | STACK_SEL | DIR_SEL | window_id
# DISPLAY_SEL: prev | next | first | last | recent | mouse | DIR_SEL | arrangement_index (one based)
# SPACE_SEL: prev | next | first | last | recent | mouse | mission_control-index (one-based) | LABEL
# LAYER: below | normal | above


#########################
# SKHD GRAMAR REFERENCE #
#########################

# A list of all built-in modifier and literal keywords can
# be found at https://github.com/koekeishiya/skhd/issues/1
#
# A hotkey is written according to the following rules:
#
#   hotkey       = <mode> '<' <action> | <action>
#
#   mode         = 'name of mode' | <mode> ',' <mode>
#
#   action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                  <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                  <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#   keysym       = <mod> '-' <key> | <key>
#
#   mod          = 'modifier keyword' | <mod> '+' <mod>
#
#   key          = <literal> | <keycode>
#
#   literal      = 'single letter or built-in keyword'
#
#   keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#   proc_map_lst = * <proc_map>
#
#   proc_map     = <string> ':' <command> | <string>     '~' |
#                  '*'      ':' <command> | '*'          '~'
#
#   string       = '"' 'sequence of characters' '"'
#
#   command      = command is executed through '$SHELL -c' and
#                  follows valid shell syntax. if the $SHELL environment
#                  variable is not set, it will default to '/bin/bash'.
#                  when bash is used, the ';' delimeter can be specified
#                  to chain commands.
#
#                  to allow a command to extend into multiple lines,
#                  prepend '\' at the end of the previous line.
#
#                  an EOL character signifies the end of the bind.
#
#   ->           = keypress is not consumed by skhd
#
#   *            = matches every application not specified in <proc_map_lst>
#
#   ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
# A mode is declared according to the following rules:
#
#   mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#               '::' <name> '@'               | '::' <name>
#
#   name      = desired name for this mode,
#
#   @         = capture keypresses regardless of being bound to an action
#
#   command   = command is executed through '$SHELL -c' and
#               follows valid shell syntax. if the $SHELL environment
#               variable is not set, it will default to '/bin/bash'.
#               when bash is used, the ';' delimeter can be specified
#               to chain commands.
#
#               to allow a command to extend into multiple lines,
#               prepend '\' at the end of the previous line.
#
#               an EOL character signifies the end of the bind.

# ############################################################### #
# THE FOLLOWING SECTION CONTAIN SIMPLE MAPPINGS DEMONSTRATING HOW #
# TO INTERACT WITH THE YABAI WM. THESE ARE SUPPOSED TO BE USED AS #
# A REFERENCE ONLY, WHEN MAKING YOUR OWN CONFIGURATION..          #
# ############################################################### #

